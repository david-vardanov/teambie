<% layout('layouts/boilerplate') %>

<div class="calendar-header">
    <h1>Vacation Calendar <%= year %></h1>
    <div class="calendar-nav">
        <a href="/events/calendar?year=<%= year - 1 %>" class="btn btn-secondary">&larr; <%= year - 1 %></a>
        <a href="/events/calendar" class="btn btn-secondary">Today</a>
        <a href="/events/calendar?year=<%= year + 1 %>" class="btn btn-secondary"><%= year + 1 %> &rarr;</a>
    </div>
</div>

<div class="calendar-table-container">
    <div class="calendar-legend">
        <div class="legend-horizontal">
            <span class="legend-item"><span class="badge badge-vacation">Vacation</span></span>
            <span class="legend-item"><span class="badge badge-holiday">Holiday</span></span>
            <span class="legend-item"><span class="badge badge-sick-day">Sick Day</span></span>
            <span class="legend-item"><span class="badge badge-home-office">Home Office</span></span>
            <span class="legend-item"><span class="badge badge-late-left-early">Late/Left Early</span></span>
            <span class="legend-item"><span class="badge badge-day-off-paid">Day Off Paid</span></span>
            <span class="legend-item"><span class="badge badge-day-off-unpaid">Day Off Unpaid</span></span>
        </div>
    </div>

    <div class="table-scroll-wrapper">
        <table class="calendar-table">
            <thead>
                <tr>
                    <th class="sticky-col first-col" rowspan="2">Employee</th>
                    <th class="sticky-col second-col" rowspan="2">Vacation</th>
                    <%
                        // Calculate total days in year for colspan
                        let totalDays = 0;
                        monthsData.forEach(md => {
                            totalDays += md.daysInMonth;
                        });
                    %>
                    <% monthsData.forEach((monthData, idx) => { %>
                        <th colspan="<%= monthData.daysInMonth %>" class="month-header"><%= monthNames[idx] %></th>
                    <% }) %>
                </tr>
                <tr>
                    <% monthsData.forEach((monthData, monthIndex) => { %>
                        <% for (let day = 1; day <= monthData.daysInMonth; day++) { %>
                            <%
                                const currentDate = new Date(year, monthIndex, day);
                                const dayOfWeek = currentDate.getDay();
                                const dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
                                const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
                                const isToday = today.getDate() === day && today.getMonth() === monthIndex && today.getFullYear() === year;
                            %>
                            <th class="day-header <%= isWeekend ? 'weekend' : '' %> <%= isToday ? 'today' : '' %>" data-date="<%= year %>-<%= monthIndex %>-<%= day %>">
                                <div class="day-number"><%= day %></div>
                                <div class="day-name"><%= dayNames[dayOfWeek] %></div>
                            </th>
                        <% } %>
                    <% }) %>
                </tr>
            </thead>
            <tbody>
                <% if (employeeStats.length > 0) { %>
                    <% employeeStats.forEach(emp => { %>
                        <tr>
                            <td class="sticky-col first-col employee-name">
                                <a href="/employees/<%= emp.id %>"><%= emp.name %></a>
                            </td>
                            <td class="sticky-col second-col vacation-count">
                                <%= emp.vacationDays %>
                            </td>
                            <% monthsData.forEach((monthData, monthIndex) => { %>
                                <% for (let day = 1; day <= monthData.daysInMonth; day++) { %>
                                    <%
                                        const currentDate = new Date(year, monthIndex, day);
                                        const dayOfWeek = currentDate.getDay();
                                        const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
                                        const isToday = today.getDate() === day && today.getMonth() === monthIndex && today.getFullYear() === year;

                                        // Find events for this employee on this day
                                        const dayEvents = events.filter(e => {
                                            if (!e.employee || e.employee.id !== emp.id) return false;
                                            const eventStart = new Date(e.startDate);
                                            const eventEnd = e.endDate ? new Date(e.endDate) : eventStart;
                                            return currentDate >= new Date(eventStart.toDateString()) && currentDate <= new Date(eventEnd.toDateString());
                                        });

                                        // Create a cell class based on event types
                                        let cellClass = isWeekend ? 'weekend' : '';
                                        if (isToday) cellClass += ' today';

                                        if (dayEvents.length > 0) {
                                            cellClass += ' has-event';
                                        }

                                        // Create events data for JSON storage
                                        const eventsData = dayEvents.map(evt => ({
                                            id: evt.id,
                                            type: evt.type,
                                            employeeName: evt.employee ? evt.employee.name : 'Global Holiday',
                                            notes: evt.notes || '',
                                            startDate: evt.startDate.toLocaleDateString(),
                                            endDate: evt.endDate ? evt.endDate.toLocaleDateString() : evt.startDate.toLocaleDateString()
                                        }));
                                    %>
                                    <td class="day-cell <%= cellClass %>" <% if (dayEvents.length > 0) { %>data-events='<%= JSON.stringify(eventsData) %>'<% } %>>
                                        <% if (dayEvents.length > 0) { %>
                                            <div class="event-indicators-wrapper">
                                                <% dayEvents.forEach((evt, idx) => {
                                                    const badgeClass = `badge-${evt.type.toLowerCase().replace(/_/g, '-')}`;
                                                %>
                                                    <span class="event-indicator <%= badgeClass %>" style="<%= dayEvents.length > 1 ? `width: ${100 / dayEvents.length}%` : '' %>"></span>
                                                <% }) %>
                                            </div>
                                        <% } %>
                                    </td>
                                <% } %>
                            <% }) %>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="<%= totalDays + 2 %>" class="empty-state">No employees found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Employee Stats Section -->
    <div class="calendar-stats-section">
        <h3>Employee Statistics (<%= year %>)</h3>
        <% if (employeeStats.length > 0) { %>
            <div class="stats-table-wrapper">
                <table class="stats-summary-table">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Vacation</th>
                            <th>Holiday</th>
                            <th>Sick Days</th>
                            <th>Home Office</th>
                            <th>Paid Day Off</th>
                            <th>Unpaid Day Off</th>
                            <th>Late/Left Early</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% employeeStats.forEach(emp => { %>
                            <tr>
                                <td class="employee-name-col"><a href="/employees/<%= emp.id %>"><%= emp.name %></a></td>
                                <td><span class="stat-badge badge-vacation"><%= emp.vacationDays %>/<%= emp.vacationAllowance %></span></td>
                                <td><span class="stat-badge badge-holiday"><%= emp.holidayDays %>/<%= emp.holidayAllowance %></span></td>
                                <td><span class="stat-badge badge-sick-day"><%= emp.sickDays %></span></td>
                                <td><span class="stat-badge badge-home-office"><%= emp.homeOfficeDays %></span></td>
                                <td><span class="stat-badge badge-day-off-paid"><%= emp.paidDayOffDays || 0 %></span></td>
                                <td><span class="stat-badge badge-day-off-unpaid"><%= emp.unpaidDayOffDays || 0 %></span></td>
                                <td><span class="stat-badge badge-late-left-early"><%= emp.lateLeftEarlyDays || 0 %></span></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <p class="empty-state">No employee statistics available</p>
        <% } %>
    </div>
</div>

<!-- Event Modal -->
<div class="event-modal-overlay" id="eventModal">
    <div class="event-modal">
        <div class="event-modal-header">
            <h3 id="modalTitle">Event Details</h3>
            <button class="event-modal-close" id="closeModal">&times;</button>
        </div>
        <div class="event-modal-body" id="modalEventsList">
            <!-- Events will be dynamically inserted here -->
        </div>
        <div class="event-modal-footer">
            <button class="btn btn-secondary" id="closeModalBtn">Close</button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('eventModal');
    const closeModalBtn = document.getElementById('closeModal');
    const closeModalFooterBtn = document.getElementById('closeModalBtn');
    const tableWrapper = document.querySelector('.table-scroll-wrapper');

    // Auto-scroll to today's column immediately
    const todayCell = document.querySelector('.calendar-table .day-header.today');
    if (todayCell && tableWrapper) {
        const stickyColsWidth = 300; // width of sticky columns (employee + vacation)
        const scrollLeft = todayCell.offsetLeft - (tableWrapper.clientWidth / 2) - stickyColsWidth + (todayCell.offsetWidth / 2);
        tableWrapper.scrollLeft = Math.max(0, scrollLeft);
    }

    // Event delegation for event indicators
    document.addEventListener('click', function(e) {
        const cell = e.target.closest('.day-cell.has-event');
        if (cell) {
            e.preventDefault();

            // Get events data from cell
            const eventsData = cell.dataset.events;
            if (!eventsData) return;

            const events = JSON.parse(eventsData);
            const modalEventsList = document.getElementById('modalEventsList');

            // Update modal title
            document.getElementById('modalTitle').textContent = events.length > 1
                ? `Events (${events.length})`
                : 'Event Details';

            // Clear previous content
            modalEventsList.innerHTML = '';

            // Add each event
            events.forEach((event, index) => {
                const formattedType = event.type.replace(/_/g, ' ');
                const badgeClass = 'badge-' + event.type.toLowerCase().replace(/_/g, '-');

                const eventCard = document.createElement('div');
                eventCard.className = 'event-card';
                if (index > 0) eventCard.style.marginTop = '1rem';
                if (index > 0) eventCard.style.paddingTop = '1rem';
                if (index > 0) eventCard.style.borderTop = '1px solid #e0e0e0';

                eventCard.innerHTML = `
                    <div class="event-modal-field">
                        <span class="event-modal-label">Type</span>
                        <div class="event-modal-value">
                            <span class="badge ${badgeClass}">${formattedType}</span>
                        </div>
                    </div>
                    <div class="event-modal-field">
                        <span class="event-modal-label">Employee</span>
                        <div class="event-modal-value">${event.employeeName || 'N/A'}</div>
                    </div>
                    <div class="event-modal-field">
                        <span class="event-modal-label">Start Date</span>
                        <div class="event-modal-value">${event.startDate || 'N/A'}</div>
                    </div>
                    <div class="event-modal-field">
                        <span class="event-modal-label">End Date</span>
                        <div class="event-modal-value">${event.endDate || 'N/A'}</div>
                    </div>
                    ${event.notes && event.notes.trim() !== '' ? `
                        <div class="event-modal-field">
                            <span class="event-modal-label">Notes</span>
                            <div class="event-modal-value">${event.notes}</div>
                        </div>
                    ` : ''}
                    <div class="event-modal-field">
                        <a href="/events/${event.id}" class="btn btn-sm btn-primary">View Full Details</a>
                    </div>
                `;

                modalEventsList.appendChild(eventCard);
            });

            // Show modal
            modal.classList.add('active');
        }
    });

    // Close modal handlers
    function closeModal() {
        modal.classList.remove('active');
    }

    closeModalBtn.addEventListener('click', closeModal);
    closeModalFooterBtn.addEventListener('click', closeModal);

    // Close modal when clicking outside
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal();
        }
    });

    // Close modal on Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeModal();
        }
    });
});
</script>
